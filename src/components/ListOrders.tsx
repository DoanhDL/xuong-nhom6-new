import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
import { Modal, Space, Table, Tag, message, Select } from "antd";
import React from "react";
import { IOrder } from "../interface/type";
import axios from "axios";
import { Link } from "react-router-dom";
import { ExclamationCircleOutlined } from "@ant-design/icons";

const { confirm } = Modal;
const { Option } = Select;


const ListOrders: React.FC = () => {
    const queryClient = useQueryClient();

    const ListOrders = async (): Promise<IOrder[]> => {
        try {
            const { data } = await axios.get(`http://localhost:3000/orders`);
            return data;
        } catch (error) {
            console.error("L·ªói khi hi·ªÉn th·ªã ƒë∆°n h√†ng");
            return [];
        }
    };

    const { data: orders, isLoading, isError } = useQuery({
        queryKey: ["orders"],
        queryFn: ListOrders,
    });

    const deleteOrders = useMutation({
        mutationFn: async (id: string) => {
            await axios.delete(`http://localhost:3000/orders/${id}`);
        },
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ["orders"] });
            message.success("Xo√° ƒë∆°n h√†ng th√†nh c√¥ng");
        },
        onError: () => {
            message.error("Xo√° ƒë∆°n h√†ng th·∫•t b·∫°i");
        },
    });

    const handleChangeStatus = async (id: string, newStatus: string) => {
        try {
            await axios.patch(`http://localhost:3000/orders/${id}`, {
                order_status: newStatus,
            });
            queryClient.invalidateQueries({ queryKey: ["orders"] });
            message.success("C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng");
        } catch (error) {
            message.error("L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i");
        }
    };

    const showDeleteConfirm = (id: string) => {
        confirm({
            title: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° ƒê∆°n h√†ng n√†y?",
            icon: <ExclamationCircleOutlined />,
            content: "Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
            okText: "Xo√°",
            okType: "danger",
            cancelText: "Hu·ª∑",
            onOk() {
                deleteOrders.mutate(id);
            },
            onCancel() {
                message.info("H·ªßy xo√° ƒê∆°n h√†ng!");
            },
        });
    };

    if (isLoading) return <p>Loading...</p>;
    if (isError) return <p>Error fetching orders</p>;

    const getColor = (status: string) => {
        switch (status) {
            case "Ch·ªù x√°c nh·∫≠n":
                return "orange";
            case "ƒêang giao":
                return "blue";
            case "Ho√†n th√†nh":
                return "green";
            case "ƒê√£ h·ªßy":
                return "red";
            default:
                return "gray";
        }
    };

    // H√†m custom m√†u hi·ªÉn th·ªã
    const tagRender = (props: any) => {
        const { value } = props;
        return (
            <Tag color={getColor(value)} style={{ fontWeight: "bold" }}>
                {value.toUpperCase()}
            </Tag>
        );
    };


    const columns = [
        {
            title: "M√£ ƒê∆°n h√†ng",
            dataIndex: "id",
            key: "id",
        },
        {
            title: "Kh√°ch H√†ng",
            dataIndex: "customer_name",
            key: "customer_name",
        },
        {
            title: " T·ªïng Ti·ªÅn ",
            dataIndex: "total_price",
            key: "total_price",
            render: (price: number) => <span>{price.toLocaleString()} VND</span>,
        },
        {
            title: "Tr·∫°ng Th√°i",
            dataIndex: "order_status",
            key: "order_status",
            render: (status: string, record: IOrder) => {
                if (status === "ƒê√£ h·ªßy") {
                    return <Tag color={getColor(status)}>{status.toUpperCase()}</Tag>;
                }
                return (
                    <Select
                        value={status}
                        onChange={(newStatus) => handleChangeStatus(record.id, newStatus)}
                        style={{ width: 160, fontWeight: "bold" }}
                        tagRender={tagRender}
                    >
                        <Option value="Ch·ªù x√°c nh·∫≠n" disabled={status !== "Ch·ªù x√°c nh·∫≠n"} style={{ color: "orange" }}>
                            üü° Ch·ªù x√°c nh·∫≠n
                        </Option>
                        <Option value="ƒêang giao" disabled={status === "Ho√†n th√†nh" || status === "ƒêang giao"} style={{ color: "blue" }}>
                            üîµ ƒêang giao
                        </Option>
                        <Option value="Ho√†n th√†nh" disabled={status === "Ho√†n th√†nh"} style={{ color: "green" }}>
                            ‚úÖ Ho√†n th√†nh
                        </Option>
                        <Option value="ƒê√£ h·ªßy" disabled={status === "Ho√†n th√†nh" || status === "ƒêang giao"} style={{ color: "red" }}>
                            ‚ùå ƒê√£ h·ªßy
                        </Option>

                    </Select>
                );
            },
        },
        {
            title: "Ng√†y T·∫°o",
            dataIndex: "created_at",
            key: "created_at",
            render: (date: string) => date ? new Date(date).toLocaleString("vi-VN") : "Kh√¥ng c√≥ d·ªØ li·ªáu"
        },
        {
            title: "C·∫≠p Nh·∫≠t",
            dataIndex: "updated_at",
            key: "updated_at",
            render: (date: string) => date ? new Date(date).toLocaleString("vi-VN") : "Kh√¥ng c√≥ d·ªØ li·ªáu"
        },
        {
            title: "Thao T√°c",
            key: "action",
            render: (_: any, record: IOrder) => (
                <Space size="middle">
                    <Link to={`/admin/orders/edit/${record.id}`} className="bg-blue-500 text-white px-3 py-1 rounded hover:bg-blue-700">
                        S·ª≠a
                    </Link>
                    <button
                        onClick={() => showDeleteConfirm(String(record.id))}
                        className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-700"
                    >
                        Xo√°
                    </button>
                </Space>
            ),
        },
    ];

    return (
        <>
            <div>
                <h2 className="text-white float-left bg-blue-600 px-4 py-2 rounded inline-block ">
                    Danh m·ª•c s·∫£n ph·∫©m
                </h2>
                <h2 className="text-white float-right bg-green-600 px-4 py-2 rounded inline-block ">
                    <Link to={"/admin/orders/add"}>Th√™m s·∫£n ph·∫©m M·ªõi</Link>
                </h2>
            </div>
            <Table<IOrder> columns={columns} dataSource={orders} rowKey="id" pagination={{ pageSize: 5 }} />
        </>
    );
};

export default ListOrders;
